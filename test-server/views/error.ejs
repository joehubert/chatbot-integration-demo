<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Error - Chatbot Widget Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .error-container {
            text-align: center;
            max-width: 600px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 60px 40px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .error-icon {
            font-size: 8rem;
            margin-bottom: 20px;
            animation: bounce 2s infinite;
        }

        .error-code {
            font-size: 6rem;
            font-weight: 900;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .error-title {
            font-size: 2.5rem;
            margin-bottom: 15px;
            font-weight: 700;
        }

        .error-message {
            font-size: 1.2rem;
            margin-bottom: 30px;
            opacity: 0.9;
            line-height: 1.6;
        }

        .error-details {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 20px;
            margin: 30px 0;
            text-align: left;
            border-left: 4px solid #ff6b6b;
        }

        .error-details h3 {
            color: #ff6b6b;
            margin-bottom: 10px;
            font-size: 1.1rem;
        }

        .error-details p {
            margin-bottom: 8px;
            font-size: 0.95rem;
            opacity: 0.8;
        }

        .error-details code {
            background: rgba(0, 0, 0, 0.3);
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            color: #feca57;
        }

        .action-buttons {
            display: flex;
            gap: 20px;
            justify-content: center;
            flex-wrap: wrap;
            margin-top: 40px;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            min-width: 140px;
            justify-content: center;
        }

        .btn-primary {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 107, 107, 0.6);
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .help-section {
            margin-top: 50px;
            padding-top: 30px;
            border-top: 1px solid rgba(255, 255, 255, 0.2);
        }

        .help-section h3 {
            margin-bottom: 20px;
            font-size: 1.3rem;
            color: #feca57;
        }

        .help-links {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
        }

        .help-link {
            color: white;
            text-decoration: none;
            padding: 10px 20px;
            border-radius: 20px;
            background: rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .help-link:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-1px);
        }

        @keyframes bounce {

            0%,
            20%,
            50%,
            80%,
            100% {
                transform: translateY(0);
            }

            40% {
                transform: translateY(-10px);
            }

            60% {
                transform: translateY(-5px);
            }
        }

        @media (max-width: 768px) {
            .error-container {
                padding: 40px 20px;
                margin: 10px;
            }

            .error-code {
                font-size: 4rem;
            }

            .error-title {
                font-size: 2rem;
            }

            .error-message {
                font-size: 1rem;
            }

            .action-buttons {
                flex-direction: column;
                align-items: center;
            }

            .btn {
                width: 100%;
                max-width: 250px;
            }

            .help-links {
                flex-direction: column;
                gap: 15px;
            }
        }

        /* Additional error-specific styles */
        .error-type-404 .error-icon::after {
            content: "üîç";
            font-size: 2rem;
            position: absolute;
            margin-left: 20px;
            animation: swing 1s ease-in-out infinite alternate;
        }

        .error-type-500 .error-icon {
            content: "‚öôÔ∏è";
        }

        .error-type-403 .error-icon {
            content: "üîí";
        }

        @keyframes swing {
            0% {
                transform: rotate(20deg);
            }

            100% {
                transform: rotate(-20deg);
            }
        }
    </style>
</head>

<body>
    <div class="error-container error-type-<%= errorCode || '500' %>">
        <div class="error-icon">
            <% if (errorCode==='404' ) { %>ü§ñ<% } else if (errorCode==='403' ) { %>üîí<% } else if (errorCode==='401' ) {
                        %>üë§<% } else { %>‚ö†Ô∏è<% } %>
        </div>

        <div class="error-code">
            <%= errorCode || '500' %>
        </div>

        <h1 class="error-title">
            <% if (errorCode==='404' ) { %>Page Not Found<% } else if (errorCode==='403' ) { %>Access Forbidden<% } else
                        if (errorCode==='401' ) { %>Unauthorized<% } else { %>Something Went Wrong<% } %>
        </h1>

        <p class="error-message">
            <% if (errorCode==='404' ) { %>
                The page you're looking for seems to have wandered off into the digital void. Don't worry, our chatbot
                can help you find your way!
                <% } else if (errorCode==='403' ) { %>
                    You don't have permission to access this resource. Perhaps our chatbot can guide you to the right
                    place?
                    <% } else if (errorCode==='401' ) { %>
                        You need to be authenticated to access this resource. Let our chatbot help you with the login
                        process!
                        <% } else { %>
                            Oops! Something unexpected happened on our end. Our development team has been notified, and
                            our chatbot is here to help while we fix things.
                            <% } %>
        </p>

        <% if (errorMessage) { %>
            <div class="error-details">
                <h3>üîç Technical Details</h3>
                <p><strong>Error:</strong>
                    <%= errorMessage %>
                </p>
                <% if (errorStack && process.env.NODE_ENV==='development' ) { %>
                    <p><strong>Stack:</strong> <code><%= errorStack.split('\n')[0] %></code></p>
                    <% } %>
                        <% if (originalUrl) { %>
                            <p><strong>Requested URL:</strong> <code><%= originalUrl %></code></p>
                            <% } %>
                                <p><strong>Timestamp:</strong>
                                    <%= new Date().toISOString() %>
                                </p>
            </div>
            <% } %>

                <div class="action-buttons">
                    <a href="/" class="btn btn-primary">
                        üè† Back to Home
                    </a>
                    <button onclick="goBack()" class="btn btn-secondary">
                        ‚Ü©Ô∏è Go Back
                    </button>
                    <button onclick="openChatbot()" class="btn btn-secondary">
                        üí¨ Get Help
                    </button>
                </div>

                <div class="help-section">
                    <h3>üÜò Need Immediate Help?</h3>
                    <div class="help-links">
                        <a href="/" class="help-link">üè† Home</a>
                        <a href="/npm-test" class="help-link">üì¶ NPM Test</a>
                        <a href="/iframe-test" class="help-link">üñºÔ∏è Iframe Test</a>
                        <a href="/mobile-test" class="help-link">üì± Mobile Test</a>
                        <a href="/corporate-sim" class="help-link">üè¢ Corporate Demo</a>
                        <a href="/ecommerce-sim" class="help-link">üõí E-commerce Demo</a>
                    </div>
                </div>
    </div>

    <!-- Widget Configuration -->
    <script>
        window.ChatbotConfig = {
            apiEndpoint: '<%= process.env.BASE_URL || 'http://localhost:3000' %>/api/chat',
                theme: 'modern-purple',
            position: 'bottom-right',
            greeting: 'Hi! I see you encountered an error. How can I help you get back on track?',
            orgId: '<%= process.env.DEFAULT_ORG_ID || 'demo- org' %>',
                autoOpen: false,
                    showTyping: true,
                        // Error page specific context
                        context: 'error-page',
                            errorCode: '<%= errorCode || 'unknown' %>',
                                errorType: 'page-error'
        };

        function goBack() {
            if (window.history.length > 1) {
                window.history.back();
            } else {
                window.location.href = '/';
            }
        }

        function openChatbot() {
            if (window.ChatbotWidget) {
                window.ChatbotWidget.open();

                // Send context-aware message based on error type
                setTimeout(() => {
                    let message = '';
                    const errorCode = '<%= errorCode || "500" %>';

                    switch (errorCode) {
                        case '404':
                            message = 'I got a 404 error. Can you help me find the page I was looking for?';
                            break;
                        case '403':
                            message = 'I encountered a 403 Forbidden error. How can I get access to this resource?';
                            break;
                        case '401':
                            message = 'I need help with authentication. Can you guide me through the login process?';
                            break;
                        default:
                            message = 'I encountered an error on the website. Can you help me resolve this issue?';
                    }

                    window.ChatbotWidget.sendMessage(message);
                }, 500);
            } else {
                console.log('Chatbot widget not available');
                alert('Chatbot is temporarily unavailable. Please try refreshing the page.');
            }
        }

        // Auto-open chatbot for certain error types (if configured)
        document.addEventListener('DOMContentLoaded', function () {
            console.log('üö® Error page loaded');
            console.log('üí¨ Chatbot available for assistance');

            // Log error details for debugging
            const errorInfo = {
                code: '<%= errorCode || "unknown" %>',
                message: '<%= errorMessage || "No message provided" %>',
                url: '<%= originalUrl || "Unknown URL" %>',
                timestamp: new Date().toISOString()
            };

            console.log('Error details:', errorInfo);

            // Auto-open chatbot for 404 errors after a delay (optional)
            <% if (errorCode === '404') { %>
                setTimeout(() => {
                    if (Math.random() < 0.3) { // 30% chance to auto-open for 404s
                        openChatbot();
                    }
                }, 3000);
            <% } %>
        });

        // Add some helpful keyboard shortcuts
        document.addEventListener('keydown', function (e) {
            switch (e.key) {
                case 'Escape':
                    goBack();
                    break;
                case 'h':
                case 'H':
                    if (e.ctrlKey || e.metaKey) {
                        e.preventDefault();
                        window.location.href = '/';
                    }
                    break;
                case 'c':
                case 'C':
                    if (e.ctrlKey || e.metaKey) {
                        e.preventDefault();
                        openChatbot();
                    }
                    break;
            }
        });

        // Add some easter eggs for developers
        console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     ü§ñ CHATBOT TEST HARNESS                     ‚ïë
‚ïë                          ERROR PAGE                             ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Error Code: <%= errorCode || 'Unknown' %>                                                      ‚ïë
‚ïë  Widget Status: Ready                                            ‚ïë
‚ïë  Integration Method: <%= errorCode === '404' ? 'CDN Script' : 'Standard' %>                                         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Keyboard Shortcuts:                                            ‚ïë
‚ïë  ‚Ä¢ Ctrl/Cmd + H: Go to Homepage                                 ‚ïë
‚ïë  ‚Ä¢ Ctrl/Cmd + C: Open Chatbot                                   ‚ïë
‚ïë  ‚Ä¢ Escape: Go Back                                              ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Available Tests:                                               ‚ïë
‚ïë  ‚Ä¢ / (CDN Integration)                                          ‚ïë
‚ïë  ‚Ä¢ /npm-test (NPM Package)                                      ‚ïë
‚ïë  ‚Ä¢ /iframe-test (Iframe Embed)                                  ‚ïë
‚ïë  ‚Ä¢ /mobile-test (Mobile Responsive)                             ‚ïë
‚ïë  ‚Ä¢ /corporate-sim (Corporate Demo)                              ‚ïë
‚ïë  ‚Ä¢ /ecommerce-sim (E-commerce Demo)                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        `);

        // Additional error handling for the chatbot widget
        window.addEventListener('error', function (e) {
            console.warn('JavaScript error on error page:', e.message);

            // If chatbot fails to load, provide alternative
            if (e.message.includes('ChatbotWidget') || e.message.includes('chatbot')) {
                console.log('Chatbot widget encountered an error, but error page is still functional');
            }
        });

        // Provide feedback mechanism
        function reportIssue() {
            const errorDetails = {
                code: '<%= errorCode || "unknown" %>',
                message: '<%= errorMessage || "" %>',
                url: window.location.href,
                userAgent: navigator.userAgent,
                timestamp: new Date().toISOString()
            };

            console.log('Issue reported:', errorDetails);

            // In a real application, this would send to an error tracking service
            alert('Thank you for reporting this issue. Our development team has been notified.');

            // Try to open chatbot for follow-up
            setTimeout(() => {
                if (window.ChatbotWidget) {
                    openChatbot();
                }
            }, 1000);
        }

        // Add report issue button dynamically for development
        <% if (process.env.NODE_ENV === 'development') { %>
            document.addEventListener('DOMContentLoaded', function () {
                const actionButtons = document.querySelector('.action-buttons');
                const reportBtn = document.createElement('button');
                reportBtn.className = 'btn btn-secondary';
                reportBtn.innerHTML = 'üêõ Report Issue';
                reportBtn.onclick = reportIssue;
                actionButtons.appendChild(reportBtn);
            });
        <% } %>
    </script>

    <!-- Load Chatbot Widget -->
    <script src="<%= process.env.BASE_URL || 'http://localhost:3000' %>/widget/chatbot-widget.js"></script>
</body>

</html>