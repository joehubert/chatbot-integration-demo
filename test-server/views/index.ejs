<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CDN Integration Test - Chatbot Widget Demo</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }

        .demo-section {
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 6px;
            border-left: 4px solid #007bff;
        }

        .code-block {
            background: #2d3748;
            color: #e2e8f0;
            padding: 20px;
            border-radius: 6px;
            overflow-x: auto;
            margin: 15px 0;
            font-family: 'Courier New', monospace;
            font-size: 14px;
        }

        .nav-links {
            display: flex;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .nav-links a {
            padding: 10px 20px;
            background: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

        .nav-links a:hover {
            background: #0056b3;
        }

        .config-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .config-item {
            background: white;
            padding: 15px;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }

        .btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
        }

        .btn:hover {
            background: #218838;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ Chatbot Widget Integration Demo</h1>
            <p>CDN Script Tag Integration Test</p>
        </div>

        <div class="nav-links">
            <a href="/">CDN Integration</a>
            <a href="/npm-test">NPM Package</a>
            <a href="/iframe-test">Iframe Embed</a>
            <a href="/mobile-test">Mobile Test</a>
            <a href="/corporate-sim">Corporate Demo</a>
            <a href="/ecommerce-sim">E-commerce Demo</a>
        </div>

        <div class="demo-section">
            <h2>üì¶ CDN Integration Method</h2>
            <p>This page demonstrates the simplest way to integrate the chatbot widget using a CDN script tag. This
                method requires no build tools and works with any website.</p>

            <h3>Implementation Code:</h3>
            <div class="code-block">
                &lt;!-- Step 1: Configure the widget --&gt;
                &lt;script&gt;
                window.ChatbotConfig = {
                apiEndpoint: 'http://localhost:3000/api/chat',
                theme: 'corporate-blue',
                position: 'bottom-right',
                greeting: 'Hello! How can I help you today?',
                orgId: 'demo-org',
                autoOpen: false,
                showTyping: true
                };
                &lt;/script&gt;

                &lt;!-- Step 2: Load the widget script --&gt;
                &lt;script src="http://localhost:3000/widget/chatbot-widget.js"&gt;&lt;/script&gt;
            </div>
        </div>

        <div class="demo-section">
            <h2>‚öôÔ∏è Configuration Options</h2>
            <div class="config-options">
                <div class="config-item">
                    <h4>Theme Options</h4>
                    <button class="btn" onclick="changeTheme('corporate-blue')">Corporate Blue</button>
                    <button class="btn" onclick="changeTheme('warm-orange')">Warm Orange</button>
                    <button class="btn" onclick="changeTheme('modern-purple')">Modern Purple</button>
                </div>
                <div class="config-item">
                    <h4>Position Options</h4>
                    <button class="btn" onclick="changePosition('bottom-right')">Bottom Right</button>
                    <button class="btn" onclick="changePosition('bottom-left')">Bottom Left</button>
                </div>
                <div class="config-item">
                    <h4>Widget Controls</h4>
                    <button class="btn" onclick="openWidget()">Open Widget</button>
                    <button class="btn" onclick="closeWidget()">Close Widget</button>
                    <button class="btn" onclick="sendTestMessage()">Send Test Message</button>
                </div>
            </div>
        </div>

        <div class="demo-section">
            <h2>üìã Integration Checklist</h2>
            <ul>
                <li>‚úÖ Add configuration script before widget script</li>
                <li>‚úÖ Include widget script from CDN</li>
                <li>‚úÖ Customize theme and positioning</li>
                <li>‚úÖ Set organization-specific greeting</li>
                <li>‚úÖ Configure API endpoint</li>
                <li>‚úÖ Test widget functionality</li>
            </ul>
        </div>

        <div class="demo-section">
            <h2>üîß Advanced Configuration</h2>
            <div class="code-block">
                window.ChatbotConfig = {
                // Required settings
                apiEndpoint: 'https://your-domain.com/api/chat',
                orgId: 'your-organization-id',

                // Appearance
                theme: 'corporate-blue', // or 'warm-orange', 'modern-purple'
                position: 'bottom-right', // or 'bottom-left'

                // Behavior
                greeting: 'Welcome! How can we help?',
                autoOpen: false, // Auto-open on page load
                showTyping: true, // Show typing indicators

                // Optional branding
                logo: '/path/to/your/logo.png',
                primaryColor: '#007bff',
                companyName: 'Your Company'
                };
            </div>
        </div>
        <!-- Add this content to your existing index.ejs file -->
        <!-- Find the existing demo-section with "üîß Advanced Configuration" and add this new section AFTER it -->

        <div class="demo-section">
            <h2>üß™ Web Components Shell Test</h2>
            <p>Testing the new Web Components implementation with Shadow DOM isolation. The widget should automatically
                choose the best rendering method for your browser.</p>

            <div class="config-options">
                <div class="config-item">
                    <h4>Integration Method</h4>
                    <p>Current method: <span id="integration-method">Detecting...</span></p>
                    <p>Browser support: <span id="browser-support">Checking...</span></p>
                </div>
                <div class="config-item">
                    <h4>Shell Responses Test</h4>
                    <button class="btn" onclick="sendShellTestMessage()">Send "test" Message</button>
                    <button class="btn" onclick="sendShellIntegrationMessage()">Send "integration" Message</button>
                    <button class="btn" onclick="sendShellFeaturesMessage()">Send "features" Message</button>
                </div>
                <div class="config-item">
                    <h4>Widget Events</h4>
                    <p>Widget status: <span id="widget-status">Loading...</span></p>
                    <p>Last event: <span id="last-event">None</span></p>
                </div>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin: 15px 0;">
                <h4>üîç What to Test:</h4>
                <ul>
                    <li><strong>Open the widget</strong> - Click the chat launcher in bottom-right corner</li>
                    <li><strong>Try shell messages</strong> - Type "test", "integration", "features", or "help"</li>
                    <li><strong>Check CSS isolation</strong> - Widget styling should be completely separate from page
                    </li>
                    <li><strong>Test responsiveness</strong> - Resize browser window or test on mobile</li>
                    <li><strong>Verify fallback</strong> - Test in different browsers (automatic iframe fallback for old
                        browsers)</li>
                </ul>
            </div>
        </div>

        <!-- Add this JavaScript section BEFORE the existing "Load Widget Script" script tag -->
        <script>
            // Web Components testing functions
            function sendShellTestMessage() {
                openWidget();
                setTimeout(() => {
                    const widget = document.querySelector('ai-chatbot-widget');
                    if (widget) {
                        // Trigger the shell chatbot with a test message
                        const event = new CustomEvent('test-message', { detail: 'test' });
                        widget.dispatchEvent(event);
                    }
                }, 500);
            }

            function sendShellIntegrationMessage() {
                openWidget();
                setTimeout(() => {
                    const widget = document.querySelector('ai-chatbot-widget');
                    if (widget) {
                        const event = new CustomEvent('test-message', { detail: 'integration' });
                        widget.dispatchEvent(event);
                    }
                }, 500);
            }

            function sendShellFeaturesMessage() {
                openWidget();
                setTimeout(() => {
                    const widget = document.querySelector('ai-chatbot-widget');
                    if (widget) {
                        const event = new CustomEvent('test-message', { detail: 'features' });
                        widget.dispatchEvent(event);
                    }
                }, 500);
            }

            // Listen for widget events to display status
            document.addEventListener('chatbot-ready', (e) => {
                console.log('ü§ñ Chatbot Ready:', e.detail);
                document.getElementById('widget-status').textContent = 'Ready';
                document.getElementById('last-event').textContent = 'Widget initialized';

                // Display integration method
                const method = e.detail.method || 'unknown';
                document.getElementById('integration-method').textContent =
                    method === 'webcomponent' ? 'Web Components (Shadow DOM)' :
                        method === 'iframe' ? 'Iframe Fallback' : method;
            });

            document.addEventListener('chatbot-opened', (e) => {
                console.log('üìñ Chatbot Opened');
                document.getElementById('widget-status').textContent = 'Open';
                document.getElementById('last-event').textContent = 'Widget opened';
            });

            document.addEventListener('chatbot-closed', (e) => {
                console.log('üìï Chatbot Closed');
                document.getElementById('widget-status').textContent = 'Closed';
                document.getElementById('last-event').textContent = 'Widget closed';
            });

            document.addEventListener('chatbot-message', (e) => {
                console.log('üí¨ Message:', e.detail);
                document.getElementById('last-event').textContent =
                    `Message: ${e.detail.sender} - ${e.detail.message.substring(0, 30)}...`;
            });

            // Check browser support
            document.addEventListener('DOMContentLoaded', function () {
                const supportsWebComponents = 'customElements' in window &&
                    'attachShadow' in Element.prototype &&
                    'getRootNode' in Element.prototype;

                document.getElementById('browser-support').textContent =
                    supportsWebComponents ? 'Full Web Components Support ‚úÖ' : 'Limited Support (will use iframe) ‚ö†Ô∏è';

                // If no widget ready event after 3 seconds, show fallback status
                setTimeout(() => {
                    if (document.getElementById('widget-status').textContent === 'Loading...') {
                        document.getElementById('widget-status').textContent = 'Fallback mode';
                        document.getElementById('integration-method').textContent = 'Legacy integration';
                    }
                }, 3000);
            });
        </script>



    </div>

    <!-- Widget Configuration -->
    <script>
        window.ChatbotConfig = {
            apiEndpoint: '<%= process.env.BASE_URL || "http://localhost:3000" %>/api/chat',
            theme: '<%= process.env.DEFAULT_WIDGET_THEME || "corporate-blue" %>',
            position: '<%= process.env.DEFAULT_WIDGET_POSITION || "bottom-right" %>',
            greeting: '<%= process.env.DEFAULT_GREETING || "Hello! How can I help you today?" %>',
            orgId: '<%= process.env.DEFAULT_ORG_ID || "demo-org" %>',
            autoOpen: false,
            showTyping: true
        };

        // Demo functions for testing
        function changeTheme(theme) {
            if (window.ChatbotWidget) {
                window.ChatbotWidget.updateConfig({ theme: theme });
            }
        }

        function changePosition(position) {
            if (window.ChatbotWidget) {
                window.ChatbotWidget.updateConfig({ position: position });
            }
        }

        function openWidget() {
            if (window.ChatbotWidget) {
                window.ChatbotWidget.open();
            }
        }

        function closeWidget() {
            if (window.ChatbotWidget) {
                window.ChatbotWidget.close();
            }
        }

        function sendTestMessage() {
            if (window.ChatbotWidget) {
                window.ChatbotWidget.sendMessage('This is a test message from the demo page!');
            }
        }
    </script>

    <!-- Load Widget Script -->
    <script src="<%= (process.env.BASE_URL || 'http://localhost:3000') + '/widget/chatbot-widget.js' %>"></script>

</body>

</html>